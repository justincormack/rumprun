#!/bin/sh
#
# Copyright (c) 2015 Martin Lucina.  All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

_RUMPBAKE_VERSION=20150828

#
# rumpbake: script for final stage linking ("baking") of a unikernel image
#

: ${READELF:=readelf}

if [ "${RUMPRUN_WARNING_STFU}" != 'please' ]; then
	exec 3>&1 1>&2
	echo
	echo !!!
	echo !!! NOTE: rumpbake is experimental. syntax may change in the future
	echo !!!
	echo
	exec 1>&3 3>&-
fi

_die()
{

	echo ">> ERROR: $*"
	exit 1
}

_usage ()
{
	cat <<EOM
rumpbake version: ${_RUMPBAKE_VERSION}

usage: rumpbake [-c conffile] config output input [input ...]
       rumpbake list

When invoked the single argument "list", lists supported target boards.

Else, creates a rumprunnable unikernel:
	config	: rumprun board configuration to use.
	output	: output file name for the unikernel image.
	input	: executable(s) to bake.
EOM
	exit 1
}

_nuketmpdir ()
{

	nukeme="${TMPDIR}"
	TMPDIR=''
	rm -rf ${nukeme}
}

ALLCONFIGS=
addconfig ()
{
	[ $# -ge 2 ] || { echo rumpbake.conf error; exit 1; }

	confname=$1
	shift

	eval [ \"\${CONFIG_PRESENT_${confname}}\" != 'yes' ] \
	    || _die config ${confname} already specified "(from ${CURCONF})"
	eval CONFIG_PRESENT_${confname}=yes

	ALLCONFIGS="${ALLCONFIGS} ${confname}"
	eval CONFIG_${confname}=\"$@\"
}

_readconfig ()
{
	CURCONF="${1}"

	if [ ! -f "${CURCONF}" ]; then
		echo "rumpbake: error: Configuration file ${CURCONF} not found"
		exit 1
	fi

	unset RUMPBAKE_CONFVERS
	. "${CURCONF}"
	[ "${RUMPBAKE_CONFVERS}" = "${_RUMPBAKE_VERSION}" ] \
	    || _die ${CURCONF} version mismatch: expecting ${_RUMPBAKE_VERSION}
}

_getoneinfo ()
{

	bin="$1"
	var="$2"
	unset tmp

	notesect=.note.rumprun.bakerecipe
	tmp="$(${READELF} -p ${notesect} ${bin} 2>/dev/null \
	    | sed -n '/.*rumprun_'"${var}"': /p')"
	[ -n "${tmp}" ] \
	    || _die "Could not extract \"${var}\" from ${bin}. Not rumprun bin?"

	# now that we've verified the entry is present, reduce to
	# contents (which may be empty)
	tmp="${tmp#*rumprun_${var}: }"

	cvar=$(echo ${var} | tr '[a-z]' '[A-Z]')

	eval [ \"\${RUMPBAKE_${cvar}:=${tmp}}\" = \"${tmp}\" ] || \
	    _die ${var} mismatch in binaries
}

_getbininfo ()
{

	# extract bake recipe
	for x in tuple tooldir backingcc cflags; do
		_getoneinfo "${1}" ${x}
	done
}

APP_TOOLS_DIR=$(dirname $0)

_readconfig "${APP_TOOLS_DIR}/rumpbake.conf"

while getopts "c:" opt; do
	case "${opt}" in
	c)
		_readconfig "${OPTARG}"
		;;
	*)
		_usage
		;;
	esac
done
shift $((${OPTIND}-1))

TARGET="${1}"
if [ "${TARGET}" = "list" ]; then
	echo ${ALLCONFIGS} | xargs -n 1 echo
	exit 0
fi

OUTPUT="${2}"
[ $# -gt 2 ] || _usage
shift 2

# We need readelf to extract the ELF note with the baking recipe.
# Just any readelf will do, but we need one.
type ${READELF} >/dev/null 2>&1 \
    || _die 'Cannot find ${READELF}. Set $READELF env variable'
unset RUMPBAKE_BACKINGCC
unset RUMPBAKE_TUPLE
unset RUMPBAKE_CFLAGS
unset RUMPBAKE_TOOLDIR

[ $# -le 8 ] || { echo '>> max 8 binaries supported currently' ; exit 1; }

# Santize the config argument passed in to remove shell
# metacharacters
config="$(echo ${TARGET} | sed -e 's/-/_/g' -e 's/[^A-Za-z0-9_]//g')"
for c in ${ALLCONFIGS}; do
	[ "$c" = "$config" ] && break
done
if [ "$c" != "$config" ]; then
	echo "rumpbake: error: unsupported config \"$config\""
	exit 1
fi

PLATFORM=${config%%_*}
eval CONFIG="\${CONFIG_${config}}"

# Parse CONFIG, mapping each component to $LIBS_component and each resulting
# lib to -l$lib
LIBS="-lrumpkern_bmktc -lrumpvfs"
for component in ${CONFIG}; do
	eval libs="\${LIBS_${component}}"
	if [ -z "${libs}" ]; then
		LIBS="${LIBS} -l${component}"
	else
		for lib in ${libs}; do
			LIBS="${LIBS} -l${lib}"
		done
	fi
done

TMPDIR=$(mktemp -d /tmp/rumpbake.XXXXXX)
trap _nuketmpdir 0 INT TERM

# Check if the file is a relocatable object produced by a rumprun toolchain.
# Create a temporary object with a unique "main"
objnum=1
allobjs=
for f in "$@"; do
	_getbininfo ${f}

	${RUMPBAKE_TOOLDIR}/${RUMPBAKE_TUPLE}-objcopy			\
	    --redefine-sym main=rumpbake_main${objnum}			\
	    -G rumpbake_main${objnum} ${f} ${TMPDIR}/tmp${objnum}.obj
	allobjs="${allobjs} ${TMPDIR}/tmp${objnum}.obj"
	objnum=$((${objnum}+1))
done

# Final link using cc to produce the unikernel image.
${RUMPBAKE_BACKINGCC} ${RUMPBAKE_CFLAGS}				\
    -specs=${RUMPBAKE_TOOLDIR}/rumprun-${PLATFORM}-specs-bake		\
    -o ${OUTPUT} ${allobjs}						\
    -Wl,--whole-archive ${LIBS} || exit 1

exit 0
